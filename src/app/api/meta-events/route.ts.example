/**
 * ========================================
 * EXEMPLO: API Route para Proxy do Meta
 * ========================================
 * 
 * Este é um arquivo de exemplo. Renomeie para route.ts e coloque em:
 * src/app/api/meta-events/route.ts
 * 
 * IMPORTANTE: Mantenha o Access Token SEGURO no servidor!
 */

import { NextRequest, NextResponse } from 'next/server';

const META_API_VERSION = 'v21.0';
const META_PIXEL_ID = process.env.META_PIXEL_ID;
const META_ACCESS_TOKEN = process.env.META_ACCESS_TOKEN;

export async function POST(request: NextRequest) {
  // Validação de variáveis de ambiente
  if (!META_PIXEL_ID || !META_ACCESS_TOKEN) {
    console.error('[Meta API] Variáveis de ambiente não configuradas');
    return NextResponse.json(
      { error: 'Configuração do servidor incompleta' },
      { status: 500 }
    );
  }

  try {
    const body = await request.json();
    
    // Constrói payload para a API do Meta
    const payload = {
      ...body,
      access_token: META_ACCESS_TOKEN,
    };

    // Envia para a API do Meta
    const response = await fetch(
      `https://graph.facebook.com/${META_API_VERSION}/${META_PIXEL_ID}/events`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      }
    );

    const data = await response.json();
    
    if (!response.ok) {
      console.error('[Meta API] Erro ao enviar evento:', data);
      return NextResponse.json(data, { status: response.status });
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error) {
    console.error('[Meta API] Erro:', error);
    return NextResponse.json(
      { error: 'Erro ao processar evento' },
      { status: 500 }
    );
  }
}

/**
 * ========================================
 * CONFIGURAÇÃO DE VARIÁVEIS DE AMBIENTE
 * ========================================
 * 
 * Adicione no .env.local:
 * 
 * META_PIXEL_ID=seu_pixel_id
 * META_ACCESS_TOKEN=seu_access_token_seguro
 * 
 * ========================================
 * 
 * Para usar este endpoint no código, configure:
 * 
 * NEXT_PUBLIC_META_API_URL=https://seu-dominio.com/api/meta-events
 * 
 * E no metaEvents.ts, use:
 * 
 * await sendMetaEvent(event, true); // true = usar servidor
 */

